diff --git a/file.py b/file.py
index d974d0a..e956670 100644
--- a/file.py
+++ b/file.py
@@ -2,6 +2,10 @@ import tkinter
 from tkinter import ttk, font
 from math import sqrt
 import color
+import logging
+
+logging.basicConfig(filename="color_wheel.log", level=logging.ERROR)
+
 
 
 GRID_DIMENSIONS = {
@@ -42,169 +46,175 @@ RADIOBUTTON_GRID = {
     "pady": (15, 7)
 }
 VOID = [""]
+NORTH_SOUTH = tkinter.N + tkinter.S
 
-def luma(R, G, B):
-    return 0.299*R + 0.587*G + 0.114*B
-
-
-class File(tkinter.Frame):
-    def __init__(self, root, ):
-        super().__init__(root)
-        self.root = root
-        self.default_sizes = True
-        self.file_path = ""
-
-        self.height = 630
-        self.width = 750
-        self.set_position()
-
-        self.create_widgets()
-        self.distribute_widgets()
-        self.draw_wheel()
-        self.set_events()
-
-    def set_position(self):
-        diameter = min(self.width, self.height) - 40
-        x1 = (self.width - diameter)//2
-        y1 = (self.height - diameter)//2
-        x2 = self.width - x1
-        y2 = self.height - y1
-        self.position = (x1, y1, x2, y2)
-
-    def create_widgets(self):
-        # canvas
-        # ======
-        self.canvas = tkinter.Canvas(self, width=self.width, height=self.height)
-
-        # ========
-        # settings
-        # ========
 
-        self.settings_frame = tkinter.LabelFrame(
-            master=self, text="Ajustes de la rueda")
+class SettingsFrame(tkinter.LabelFrame):
+    def __init__(self, master, text):
+        super().__init__(master, text=text)
 
         # number
-        # ======
-        self.number_var = tkinter.IntVar(self.settings_frame, 360)
-        self.number_label = tkinter.Label(self.settings_frame,
-                                          text="Cantidad:")
+        self.number_var = tkinter.IntVar(self, 360)
+        self.number_label = tkinter.Label(self, text="Cantidad:")
         self.number_entry = tkinter.Entry(
-            self.settings_frame, textvariable=self.number_var,
-            **ENTRY_SETTINGS)
+            self, textvariable=self.number_var, **ENTRY_SETTINGS)
         self.number_scale = tkinter.Scale(
-            self.settings_frame, variable=self.number_var, **SCALE_360)
+            self, variable=self.number_var, **SCALE_360)
 
         # start
-        # =====
-        self.start_var = tkinter.IntVar(self.settings_frame, 0)
-        self.start_label = tkinter.Label(self.settings_frame,
-                                         text="Empezar en:")
+        self.start_var = tkinter.IntVar(self, 0)
+        self.start_label = tkinter.Label(self, text="Empezar en:")
         self.start_entry = tkinter.Entry(
-            self.settings_frame, textvariable=self.start_var, **ENTRY_SETTINGS)
+            self, textvariable=self.start_var, **ENTRY_SETTINGS)
         self.start_scale = tkinter.Scale(
-            self.settings_frame, variable=self.start_var, **SCALE_360  )
+            self, variable=self.start_var, **SCALE_360  )
 
-        # Saturation
-        # ==========
-        self.saturation_var = tkinter.IntVar(self.settings_frame, 50)
-        self.saturation_label = tkinter.Label(self.settings_frame,
-                                              text="Saturación:")
+        # saturation
+        self.saturation_var = tkinter.IntVar(self, 50)
+        self.saturation_label = tkinter.Label(self, text="Saturación:")
         self.saturation_entry = tkinter.Entry(
-            self.settings_frame, textvariable=self.saturation_var,
-            **ENTRY_SETTINGS)
+            self, textvariable=self.saturation_var, **ENTRY_SETTINGS)
         self.saturation_scale = tkinter.Scale(
-            self.settings_frame, variable=self.saturation_var, **SCALE_100)
+            self, variable=self.saturation_var, **SCALE_100)
 
         # luminosity
-        # ==========
-        self.luminosity_var = tkinter.IntVar(self.settings_frame, 50)
-        self.luminosity_label = tkinter.Label(self.settings_frame,
-                                              text="Luminosidad:")
+        self.luminosity_var = tkinter.IntVar(self, 50)
+        self.luminosity_label = tkinter.Label(self, text="Luminosidad:")
         self.luminosity_entry = tkinter.Entry(
-            self.settings_frame, textvariable=self.luminosity_var,
-            **ENTRY_SETTINGS)
+            self, textvariable=self.luminosity_var, **ENTRY_SETTINGS)
         self.luminosity_scale = tkinter.Scale(
-            self.settings_frame, variable=self.luminosity_var, **SCALE_100)
+            self, variable=self.luminosity_var, **SCALE_100)
+
+    def grid(self, *args, **kwargs):
+        super().grid(*args, **kwargs)
+
+        # number
+        self.number_label.grid(row=0, column=0, **GRID_DIMENSIONS)
+        self.number_entry.grid(row=0, column=1, **ENTRY_DIMENSIONS)
+        self.number_scale.grid(row=0, column=2, **GRID_DIMENSIONS)
+
+        # start
+        self.start_label.grid(row=1, column=0, **GRID_DIMENSIONS)
+        self.start_entry.grid(row=1, column=1, **ENTRY_DIMENSIONS)
+        self.start_scale.grid(row=1, column=2, **GRID_DIMENSIONS)
+
+        # Saturation
+        self.saturation_label.grid(row=2, column=0, **GRID_DIMENSIONS)
+        self.saturation_entry.grid(row=2, column=1, **ENTRY_DIMENSIONS)
+        self.saturation_scale.grid(row=2, column=2, **GRID_DIMENSIONS)
 
-        # ==========
-        # view frame
-        # ==========
-        self.view_frame = tkinter.LabelFrame(self, text="Visualización")
+        # luminosity
+        self.luminosity_label.grid(row=3, column=0, **GRID_DIMENSIONS)
+        self.luminosity_entry.grid(row=3, column=1, **ENTRY_DIMENSIONS)
+        self.luminosity_scale.grid(row=3, column=2, **GRID_DIMENSIONS)
+
+    @property
+    def number(self): return self.number_var.get()
+    @property
+    def start(self): return self.start_var.get()
+    @property
+    def saturation(self): return self.saturation_var.get()
+    @property
+    def luminosity(self): return self.luminosity_var.get()
+
+    @number.setter
+    def number(self, value): return self.number_var.set(value)
+    @start.setter
+    def start(self, value): return self.start_var.set(value)
+    @saturation.setter
+    def saturation(self, value): return self.saturation_var.set(value)
+    @luminosity.setter
+    def luminosity(self, value): return self.luminosity_var.set(value)
+
+
+class ViewFrame(tkinter.LabelFrame):
+    def __init__(self, master, text, command=None):
+        super().__init__(master, text=text)
 
         # background
-        # ==========
         self.background_var = tkinter.StringVar(self, "gray20")
-        self.background_label = tkinter.Label(
-            self.view_frame, text="Color de fondo:")
+        self.background_label = tkinter.Label(self, text="Color de fondo:")
         self.background_entry = tkinter.Entry(
-            self.view_frame, textvariable=self.background_var, width=7,
+            self, textvariable=self.background_var, width=7,
             justify=tkinter.CENTER)
 
         # outline
-        # =======
         self.outline_var = tkinter.IntVar(self)
         self.outline_checkbutton = tkinter.Checkbutton(
-            self.view_frame, text=" Dibujar contorno",
-            variable=self.outline_var, command=self.draw_wheel)
+            self, text=" Dibujar contorno",
+            variable=self.outline_var, command=command)
+
+    def grid(self, *args, **kwargs):
+        super().grid(*args, **kwargs)
+        self.background_label.grid(row=0, column=0, **GRID_DIMENSIONS)
+        self.background_entry.grid(row=0, column=1, **ENTRY_DIMENSIONS)
+        self.outline_checkbutton.grid(row=0, column=2, **GRID_DIMENSIONS)
 
+    @property
+    def background(self): return self.background_var.get()
+    @property
+    def outline(self): return self.outline_var.get()
 
-        # ===========
-        # space frame
-        # ===========
+    @background.setter
+    def background(self, value): return self.background_var.set(value)
+    @outline.setter
+    def outline(self, value): return self.outline_var.set(value)
 
-        self.color_space_frame = tkinter.LabelFrame(
-            self, text="Espacio de color")
 
-        # color space
-        # ===========
+class ColorSpaceFrame(tkinter.LabelFrame):
+    def __init__(self, master, text, command=None):
+        super().__init__(master, text=text)
         self.color_space_var = tkinter.StringVar(self, "HSL")
         self.lchab_radiobutton = tkinter.Radiobutton(
-            self.color_space_frame, text="Lab", value="Lab",
-            variable=self.color_space_var, command=self.draw_wheel,
-            indicatoron=0, highlightthickness=0, padx=6)
+            self, text="Lab", value="Lab", variable=self.color_space_var,
+            command=command, indicatoron=0, highlightthickness=0, padx=6)
         self.lchuv_radiobutton = tkinter.Radiobutton(
-            self.color_space_frame, text="Luv", value="Luv",
-            variable=self.color_space_var, command=self.draw_wheel,
-            indicatoron=0, highlightthickness=0, padx=6)
+            self, text="Luv", value="Luv", variable=self.color_space_var,
+            command=command, indicatoron=0, highlightthickness=0, padx=6)
         self.hsl_radiobutton = tkinter.Radiobutton(
-            self.color_space_frame, text="HSL", value="HSL",
-            variable=self.color_space_var, command=self.draw_wheel,
-            indicatoron=0, highlightthickness=0, padx=6)
+            self, text="HSL", value="HSL", variable=self.color_space_var,
+            command=command, indicatoron=0, highlightthickness=0, padx=6)
         self.hsv_radiobutton = tkinter.Radiobutton(
-            self.color_space_frame, text="HSV", value="HSV",
-            variable=self.color_space_var, command=self.draw_wheel,
-            indicatoron=0, highlightthickness=0, padx=6)
+            self, text="HSV", value="HSV", variable=self.color_space_var,
+            command=command, indicatoron=0, highlightthickness=0, padx=6)
         self.ipt_radiobutton = tkinter.Radiobutton(
-            self.color_space_frame, text="IPT", value="IPT",
-            variable=self.color_space_var, command=self.draw_wheel,
-            indicatoron=0, highlightthickness=0, padx=6)
-
-        # ==========
-        # data frame
-        # ==========
-        self.data_frame = tkinter.Frame(self)
-
-        # data treeview
-        # =============
-        self.color_treeview = ttk.Treeview(self.data_frame,
-                                          columns=["Color"],
-                                          show="headings")
-        self.hexrgb_treeview = ttk.Treeview(self.data_frame,
-                                            columns=["Hex RGB"],
-                                            show="headings")
-        self.hexrgba_treeview = ttk.Treeview(self.data_frame,
-                                             columns=["Hex RGBA"],
-                                             show="headings")
-
-        self.r_treeview = ttk.Treeview(self.data_frame, columns=["R"],
-                                       show="headings")
-        self.g_treeview = ttk.Treeview(self.data_frame, columns=["G"],
-                                       show="headings")
-        self.b_treeview = ttk.Treeview(self.data_frame, columns=["B"],
-                                       show="headings")
-
-        def measure(text):
-            return font.Font(self.root).measure(text)
+            self, text="IPT", value="IPT", variable=self.color_space_var,
+            command=command, indicatoron=0, highlightthickness=0, padx=6)
+
+    def grid(self, *args, **kwargs):
+        super().grid(*args, **kwargs)
+        self.lchab_radiobutton.grid(row=0, column=0, padx=(15, 0),
+                                    **RADIOBUTTON_GRID)
+        self.lchuv_radiobutton.grid(row=0, column=1, **RADIOBUTTON_GRID)
+        self.hsl_radiobutton.grid(row=0, column=2, **RADIOBUTTON_GRID)
+        self.hsv_radiobutton.grid(row=0, column=3, **RADIOBUTTON_GRID)
+        self.ipt_radiobutton.grid(row=0, column=4, **RADIOBUTTON_GRID)
+
+    @property
+    def space(self): return self.color_space_var.get()
+
+    @space.setter
+    def space(self, value): return self.color_space_var.set(value)
+
+
+class DataFrame(tkinter.Frame):
+    def __init__(self, master):
+        super().__init__(master)
+
+        self.color_treeview = ttk.Treeview(
+            self, columns=["Color"], show="headings")
+        self.hexrgb_treeview = ttk.Treeview(
+            self, columns=["Hex RGB"], show="headings")
+        self.hexrgba_treeview = ttk.Treeview(
+            self, columns=["Hex RGBA"], show="headings")
+        self.r_treeview = ttk.Treeview(
+            self, columns=["R"], show="headings")
+        self.g_treeview = ttk.Treeview(
+            self, columns=["G"], show="headings")
+        self.b_treeview = ttk.Treeview(
+            self, columns=["B"], show="headings")
+
+        measure = font.Font(master).measure
 
         M1 = measure(" Color ")
         M2 = measure(" Hex RGB ")
@@ -227,98 +237,217 @@ class File(tkinter.Frame):
         self.b_treeview.column("B", width=M4)
         self.b_treeview.heading("B", text="B")
 
-        self.data_scroll = tkinter.Scrollbar(self.data_frame)
-        self.data_scroll.configure(command=self.set_yview)
+        self.scroll = tkinter.Scrollbar(self)
+        self.scroll.configure(command=self.set_yview)
 
-        self.color_treeview.configure(yscrollcommand=self.set_scroll,
-                                      selectmode="none")
+        self.color_treeview.configure(
+            yscrollcommand=self.set_scroll, selectmode="none")
         self.hexrgb_treeview.configure(yscrollcommand=self.set_scroll)
         self.hexrgba_treeview.configure(yscrollcommand=self.set_scroll)
         self.r_treeview.configure(yscrollcommand=self.set_scroll)
         self.g_treeview.configure(yscrollcommand=self.set_scroll)
         self.b_treeview.configure(yscrollcommand=self.set_scroll)
 
-    def distribute_widgets(self):
-        self.grid(padx=0, pady=0)
-
-        # canvas
-        # ======
-        self.canvas.grid(row=0, column=3, rowspan=5, padx=15, pady=15)
-
-        # ========
-        # settings
-        # ========
-        self.settings_frame.grid(row=0, column=0, **FRAME_GRID)
-
-        # number
-        # ======
-        self.number_label.grid(row=0, column=0, **GRID_DIMENSIONS)
-        self.number_entry.grid(row=0, column=1, **ENTRY_DIMENSIONS)
-        self.number_scale.grid(row=0, column=2, **GRID_DIMENSIONS)
-
-        # start
-        # =====
-        self.start_label.grid(row=1, column=0, **GRID_DIMENSIONS)
-        self.start_entry.grid(row=1, column=1, **ENTRY_DIMENSIONS)
-        self.start_scale.grid(row=1, column=2, **GRID_DIMENSIONS)
+        self.copy_color_data = self.copy_data(self.color_treeview)
+        self.copy_hexrgb_data = self.copy_data(self.hexrgb_treeview)
+        self.copy_hexrgba_data = self.copy_data(self.hexrgba_treeview)
+        self.copy_r_data = self.copy_data(self.r_treeview)
+        self.copy_g_data = self.copy_data(self.g_treeview)
+        self.copy_b_data = self.copy_data(self.b_treeview)
 
-        # Saturation
-        # ==========
-        self.saturation_label.grid(row=2, column=0, **GRID_DIMENSIONS)
-        self.saturation_entry.grid(row=2, column=1, **ENTRY_DIMENSIONS)
-        self.saturation_scale.grid(row=2, column=2, **GRID_DIMENSIONS)
-
-        # luminosity
-        # ==========
-        self.luminosity_label.grid(row=3, column=0, **GRID_DIMENSIONS)
-        self.luminosity_entry.grid(row=3, column=1, **ENTRY_DIMENSIONS)
-        self.luminosity_scale.grid(row=3, column=2, **GRID_DIMENSIONS)
+        self.set_events()
 
-        # ==========
-        # view frame
-        # ==========
-        self.view_frame.grid(row=1, column=0, **FRAME_GRID)
+    def grid(self, *args, **kwargs):
+        super().grid(*args, **kwargs)
+        self.color_treeview.grid(row=0, column=0, sticky=NORTH_SOUTH)
+        self.hexrgb_treeview.grid(row=0, column=1, sticky=NORTH_SOUTH)
+        self.hexrgba_treeview.grid(row=0, column=2, sticky=NORTH_SOUTH)
+        self.r_treeview.grid(row=0, column=3, sticky=NORTH_SOUTH)
+        self.g_treeview.grid(row=0, column=4, sticky=NORTH_SOUTH)
+        self.b_treeview.grid(row=0, column=5, sticky=NORTH_SOUTH)
+        self.scroll.grid(row=0, column=6, sticky=NORTH_SOUTH)
 
-        # background
-        # ==========
-        self.background_label.grid(row=0, column=0, **GRID_DIMENSIONS)
-        self.background_entry.grid(row=0, column=1, **ENTRY_DIMENSIONS)
+    def set_yview(self, *args):
+        self.color_treeview.yview(*args)
+        self.hexrgb_treeview.yview(*args)
+        self.hexrgba_treeview.yview(*args)
+        self.r_treeview.yview(*args)
+        self.g_treeview.yview(*args)
+        self.b_treeview.yview(*args)
 
-        # outline
-        # =======
-        self.outline_checkbutton.grid(row=0, column=2, **GRID_DIMENSIONS)
+    def set_scroll(self, x, y):
+        self.set_yview("moveto", x)
+        self.scroll.set(x, y)
+
+    def insert(self, hex_val, R, G, B):
+        self.color_treeview.insert("", "end", values=VOID, tags=[hex_val])
+        self.color_treeview.tag_configure(hex_val, background=hex_val)
+        self.hexrgb_treeview.insert("", "end", values=[hex_val])
+        self.hexrgba_treeview.insert("", "end", values=[hex_val + "ff"])
+        self.r_treeview.insert("", "end", values=[R])
+        self.g_treeview.insert("", "end", values=[G])
+        self.b_treeview.insert("", "end", values=[B])
+
+    def delete_all(self):
+        trees = zip(self.color_treeview.get_children(),
+                    self.hexrgb_treeview.get_children(),
+                    self.hexrgba_treeview.get_children(),
+                    self.r_treeview.get_children(),
+                    self.g_treeview.get_children(),
+                    self.b_treeview.get_children())
+
+        for t1, t2, t3, t4, t5, t6 in trees:
+            self.color_treeview.delete(t1)
+            self.hexrgb_treeview.delete(t2)
+            self.hexrgba_treeview.delete(t3)
+            self.r_treeview.delete(t4)
+            self.g_treeview.delete(t5)
+            self.b_treeview.delete(t6)
 
-        # ===========
-        # space frame
-        # ===========
-        self.color_space_frame.grid(row=2, column=0, **FRAME_GRID)
+    def copy_data(self, tree):
+        def copy_content(event):
+            item = tree.selection()[0]
+            value = tree.item(item)["values"][0]
+            self.clipboard_clear()
+            self.clipboard_append(value)
+        return copy_content
 
-        # color space
-        # ===========
-        self.lchab_radiobutton.grid(row=0, column=0, padx=(15, 0),
-                                    **RADIOBUTTON_GRID)
-        self.lchuv_radiobutton.grid(row=0, column=1, **RADIOBUTTON_GRID)
-        self.hsl_radiobutton.grid(row=0, column=2, **RADIOBUTTON_GRID)
-        self.hsv_radiobutton.grid(row=0, column=3, **RADIOBUTTON_GRID)
-        self.ipt_radiobutton.grid(row=0, column=4, **RADIOBUTTON_GRID)
+    def set_events(self):
+        self.color_treeview.bind("<Double-Button-1>", self.copy_color_data)
+        self.hexrgb_treeview.bind("<Double-Button-1>", self.copy_hexrgb_data)
+        self.hexrgba_treeview.bind("<Double-Button-1>", self.copy_hexrgba_data)
+        self.r_treeview.bind("<Double-Button-1>", self.copy_r_data)
+        self.g_treeview.bind("<Double-Button-1>", self.copy_g_data)
+        self.b_treeview.bind("<Double-Button-1>", self.copy_b_data)
+
+
+# Memory efficient history storage.
+#
+# This use the key-sharing dictionary implementation
+# and __slots__ to reduce the memory consumption
+class HistoryData:
+    __slots__ = ("number", "start", "saturation", "luminosity", "background",
+                 "color_space", "outline")
+    def __init__(self, number, start, saturation, luminosity, background,
+                 color_space, outline):
+        self.number = number
+        self.start = start
+        self.saturation = saturation
+        self.luminosity = luminosity
+        self.background = background
+        self.color_space = color_space
+        self.outline = outline
+
+    def __eq__(self, other):
+        if  self.number      == other.number      \
+        and self.start       == other.start       \
+        and self.saturation  == other.saturation  \
+        and self.luminosity  == other.luminosity  \
+        and self.background  == other.background  \
+        and self.color_space == other.color_space \
+        and self.outline     == other.outline:
+            return True
+        else:
+            return False
+
+    def __repr__(self):
+        return (f'HistoryData(number={self.number}, '
+                f'start={self.start}, '
+                f'saturation={self.saturation}, '
+                f'luminosity={self.luminosity}, '
+                f'background={self.background}, '
+                f'color_space={self.color_space}, '
+                f'outline={self.outline})')
+
+class History(list):
+    def __init__(self):
+        super().__init__()
+        self.cursor = -1
+
+    def append(self, data):
+        len_self = len(self)
+        if len_self - 1 == self.cursor:
+            super().append(data)
+            self.cursor += 1
+        elif len_self - 1 > self.cursor:
+            self.cursor += 1
+            aux = self[:self.cursor] + [data]
+            self.clear()
+            self.extend(aux)
+        else:
+            logging.error("ValueError: len(self) = %r; self.cursor = %s",
+                          len_self, self.cursor)
+
+    def prev(self):
+        len_self = len(self)
+        if len_self == 1:
+            result = self[0]
+        elif len_self - 1 >= self.cursor:
+            if self.cursor >= 0:
+                self.cursor -= 1
+            result = self[self.cursor]
+        else:
+            logging.error("ValueError: len(self) = %r; self.cursor = %s",
+                          len_self, self.cursor)
+        return result
+
+    def next(self):
+        len_self = len(self)
+        if len_self == 1:
+            result = self[0]
+        elif len_self - 1 == self.cursor:
+            result = self[self.cursor]
+        elif len_self - 1 > self.cursor:
+            self.cursor += 1
+            result = self[self.cursor]
+        else:
+            logging.error("ValueError: len(self) = %r; self.cursor = %s",
+                          len_self, self.cursor)
+            result = self[-1]
+        return result
 
-        # ==========
-        # data frame
-        # ==========
+class File(tkinter.Frame):
+    def __init__(self, root, ):
+        super().__init__(root)
+        self.root = root
+        self.default_sizes = True
+        self.file_path = ""
+        self.history = History()
+        self.update_history = True
 
-        self.data_frame.grid(row=3, column=0, **FRAME_GRID)
+        self.height = 630
+        self.width = 750
+        self.set_position()
 
-        # data treeview
-        # =============
-        self.color_treeview.grid(row=0, column=0, sticky=tkinter.N+tkinter.S)
-        self.hexrgb_treeview.grid(row=0, column=1, sticky=tkinter.N+tkinter.S)
-        self.hexrgba_treeview.grid(row=0, column=2, sticky=tkinter.N+tkinter.S)
+        self.create_widgets()
+        self.draw_wheel()
+        self.set_events()
 
-        self.r_treeview.grid(row=0, column=3, sticky=tkinter.N+tkinter.S)
-        self.g_treeview.grid(row=0, column=4, sticky=tkinter.N+tkinter.S)
-        self.b_treeview.grid(row=0, column=5, sticky=tkinter.N+tkinter.S)
+    def set_position(self):
+        diameter = min(self.width, self.height) - 40
+        x1 = (self.width - diameter)//2
+        y1 = (self.height - diameter)//2
+        x2 = self.width - x1
+        y2 = self.height - y1
+        self.position = (x1, y1, x2, y2)
 
-        self.data_scroll.grid(row=0, column=6, sticky=tkinter.N+tkinter.S)
+    def create_widgets(self):
+        self.canvas = tkinter.Canvas(
+            self, width=self.width, height=self.height)
+        self.settings = SettingsFrame(self, text="Ajustes de la rueda")
+        self.view = ViewFrame(
+            self, text="Visualización", command=self.draw_wheel)
+        self.color_space = ColorSpaceFrame(
+            self, text="Espacio de color", command=self.draw_wheel)
+        self.data = DataFrame(self)
+
+    def grid(self, *args, **kwargs):
+        super().grid(*args, **kwargs)
+        self.canvas.grid(row=0, column=3, rowspan=5, padx=15, pady=15)
+        self.settings.grid(row=0, column=0, **FRAME_GRID)
+        self.view.grid(row=1, column=0, **FRAME_GRID)
+        self.color_space.grid(row=2, column=0, **FRAME_GRID)
+        self.data.grid(row=3, column=0, **FRAME_GRID)
 
     def select_changed_value(self):
         widget = self.root.focus_get()
@@ -327,56 +456,36 @@ class File(tkinter.Frame):
            widget.select_range(0, index)
 
     def draw_wheel(self, event=None):
-        number = max(self.number_var.get(), 1)
-        saturation = self.saturation_var.get()
-        luminosity = self.luminosity_var.get()
-        start = self.start_var.get()
+        number = max(self.settings.number, 1)
+        saturation = self.settings.saturation
+        luminosity = self.settings.luminosity
+        start = self.settings.start
         step = 360/number
-        background = self.background_var.get()
+        background = self.view.background
         self.canvas.create_rectangle(0, 0, self.width, self.height,
                                      fill=background, outline=background)
-        name = self.color_space_var.get()
+        name = self.color_space.space
         colors = color.space[name](start, number, saturation, luminosity)
-        outline = bool(self.outline_var.get())
-
-        tree1 = self.color_treeview.get_children()
-        tree2 = self.hexrgb_treeview.get_children()
-        tree3 = self.hexrgba_treeview.get_children()
-        tree4 = self.r_treeview.get_children()
-        tree5 = self.g_treeview.get_children()
-        tree6 = self.b_treeview.get_children()
-
-        self_canvas_create_arc = self.canvas.create_arc
-        self_color_treeview_insert = self.color_treeview.insert
-        self_color_treeview_tag_configure = self.color_treeview.tag_configure
-        self_hexrgb_treeview_insert = self.hexrgb_treeview.insert
-        self_hexrgba_treeview_insert = self.hexrgba_treeview.insert
-        self_r_treeview_insert = self.r_treeview.insert
-        self_g_treeview_insert = self.g_treeview.insert
-        self_b_treeview_insert = self.b_treeview.insert
-
-        for t1, t2, t3, t4, t5, t6 \
-        in zip(tree1, tree2, tree3, tree4, tree5, tree6):
-            self.color_treeview.delete(t1)
-            self.hexrgb_treeview.delete(t2)
-            self.hexrgba_treeview.delete(t3)
-            self.r_treeview.delete(t4)
-            self.g_treeview.delete(t5)
-            self.b_treeview.delete(t6)
+        outline = self.view.outline
+
+        if self.update_history:
+            self.history.append(HistoryData(
+                number=number,
+                start=start,
+                saturation=saturation,
+                luminosity=luminosity,
+                background=background,
+                color_space=name,
+                outline=outline,
+            ))
+
+        self.data.delete_all()
 
         for i, (hex_val, R, G, B) in enumerate(colors):
-            self_canvas_create_arc(self.position, fill=hex_val,
+            self.canvas.create_arc(self.position, fill=hex_val,
                                    start=(i*step), extent=step,
                                    outline="black" if outline else hex_val)
-
-            self_color_treeview_insert("", "end", values=VOID, tags=(hex_val,))
-            self_color_treeview_tag_configure(hex_val, background=hex_val)
-
-            self_hexrgb_treeview_insert("", "end", values=[hex_val])
-            self_hexrgba_treeview_insert("", "end", values=[hex_val + "ff"])
-            self_r_treeview_insert("", "end", values=[R])
-            self_g_treeview_insert("", "end", values=[G])
-            self_b_treeview_insert("", "end", values=[B])
+            self.data.insert(hex_val, R, G, B)
 
         x1, y1, x2, y2 = self.position
         self.canvas.create_oval(x1 + 50, y1 + 50, x2 - 50, y2 - 50,
@@ -385,31 +494,6 @@ class File(tkinter.Frame):
         self.canvas.update()
         self.select_changed_value()
 
-    def set_yview(self, *args):
-        self.color_treeview.yview(*args)
-        self.hexrgb_treeview.yview(*args)
-        self.hexrgba_treeview.yview(*args)
-        self.r_treeview.yview(*args)
-        self.g_treeview.yview(*args)
-        self.b_treeview.yview(*args)
-
-    def set_scroll(self, x, y):
-        self.color_treeview.yview("moveto", x)
-        self.hexrgb_treeview.yview("moveto", x)
-        self.hexrgba_treeview.yview("moveto", x)
-        self.r_treeview.yview("moveto", x)
-        self.g_treeview.yview("moveto", x)
-        self.b_treeview.yview("moveto", x)
-        self.data_scroll.set(x, y)
-
-    def copy_data(self, tree):
-        def copy_content(event):
-            item = tree.selection()[0]
-            value = tree.item(item)["values"][0]
-            self.root.clipboard_clear()
-            self.root.clipboard_append(value)
-        return copy_content
-
     def resize_canvas(self, event):
         if self.default_sizes:
             settings_w = self.settings_frame.winfo_width()
@@ -427,8 +511,8 @@ class File(tkinter.Frame):
         # self.root.unbind("<Configure>")
 
         self.canvas.destroy()
-        self.settings_frame.destroy()
-        self.view_frame.destroy()
+        self.settings.destroy()
+        self.view.destroy()
         self.color_space_frame.destroy()
         self.data_frame.destroy()
 
@@ -440,41 +524,28 @@ class File(tkinter.Frame):
 
     def set_events(self):
         # self.root.bind("<Configure>", self.resize_canvas)
-        self.number_entry.bind("<Return>", self.draw_wheel)
-        self.number_entry.bind("<KP_Enter>", self.draw_wheel)
-        self.number_scale.bind("<ButtonRelease-1>", self.draw_wheel)
-
-        self.start_entry.bind("<Return>", self.draw_wheel)
-        self.start_entry.bind("<KP_Enter>", self.draw_wheel)
-        self.start_scale.bind("<ButtonRelease-1>", self.draw_wheel)
-
-        self.luminosity_entry.bind("<Return>", self.draw_wheel)
-        self.luminosity_entry.bind("<KP_Enter>", self.draw_wheel)
-        self.luminosity_scale.bind("<ButtonRelease-1>", self.draw_wheel)
+        self.settings.number_entry.bind("<Return>", self.draw_wheel)
+        self.settings.number_entry.bind("<KP_Enter>", self.draw_wheel)
+        self.settings.number_scale.bind("<ButtonRelease-1>", self.draw_wheel)
 
-        self.saturation_entry.bind("<Return>", self.draw_wheel)
-        self.saturation_entry.bind("<KP_Enter>", self.draw_wheel)
-        self.saturation_scale.bind("<ButtonRelease-1>", self.draw_wheel)
+        self.settings.start_entry.bind("<Return>", self.draw_wheel)
+        self.settings.start_entry.bind("<KP_Enter>", self.draw_wheel)
+        self.settings.start_scale.bind("<ButtonRelease-1>", self.draw_wheel)
 
-        self.background_entry.bind("<Return>", self.draw_wheel)
-        self.background_entry.bind("<KP_Enter>", self.draw_wheel)
+        self.settings.luminosity_entry.bind("<Return>", self.draw_wheel)
+        self.settings.luminosity_entry.bind("<KP_Enter>", self.draw_wheel)
+        self.settings.luminosity_scale.bind("<ButtonRelease-1>", self.draw_wheel)
 
-        copy_color_data = self.copy_data(self.color_treeview)
-        copy_hexrgb_data = self.copy_data(self.hexrgb_treeview)
-        copy_hexrgba_data = self.copy_data(self.hexrgba_treeview)
-        copy_r_data = self.copy_data(self.r_treeview)
-        copy_g_data = self.copy_data(self.g_treeview)
-        copy_b_data = self.copy_data(self.b_treeview)
+        self.settings.saturation_entry.bind("<Return>", self.draw_wheel)
+        self.settings.saturation_entry.bind("<KP_Enter>", self.draw_wheel)
+        self.settings.saturation_scale.bind("<ButtonRelease-1>", self.draw_wheel)
 
-        self.color_treeview.bind("<Double-Button-1>", copy_color_data)
-        self.hexrgb_treeview.bind("<Double-Button-1>", copy_hexrgb_data)
-        self.hexrgba_treeview.bind("<Double-Button-1>", copy_hexrgba_data)
-        self.r_treeview.bind("<Double-Button-1>", copy_r_data)
-        self.g_treeview.bind("<Double-Button-1>", copy_g_data)
-        self.b_treeview.bind("<Double-Button-1>", copy_b_data)
+        self.view.background_entry.bind("<Return>", self.draw_wheel)
+        self.view.background_entry.bind("<KP_Enter>", self.draw_wheel)
 
 
 if __name__ == '__main__':
     root = tkinter.Tk()
     file = File(root)
+    file.grid(padx=0, pady=0, row=0, column=0)
     root.mainloop()
diff --git a/main.py b/main.py
index 353b8d0..e6fe39a 100644
--- a/main.py
+++ b/main.py
@@ -30,7 +30,7 @@ def save_config():
         SETTINGS.write(settings_file)
 
 
-class AppWidgets(tkinter.Frame):
+class App(tkinter.Frame):
     def __init__(self, root):
         super().__init__(root)
         self.root = root
@@ -47,23 +47,28 @@ class AppWidgets(tkinter.Frame):
         self.new_button.grid(row=0, column=0)
 
         self.open_button = tkinter.Button(
-            self.toolbar, text="abrir", highlightthickness=0)
+            self.toolbar, text="abrir", highlightthickness=0,
+            command=self.open_wheel)
         self.open_button.grid(row=0, column=1)
 
         self.save_button = tkinter.Button(
-            self.toolbar, text="guardar", highlightthickness=0)
+            self.toolbar, text="guardar", highlightthickness=0,
+            command=self.save_changes)
         self.save_button.grid(row=0, column=2)
 
         self.save_as_button = tkinter.Button(
-            self.toolbar, text="guardar como", highlightthickness=0)
+            self.toolbar, text="guardar como", highlightthickness=0,
+            command=self.save_wheel)
         self.save_as_button.grid(row=0, column=3)
 
         self.undo_button = tkinter.Button(
-            self.toolbar, text="deshacer", highlightthickness=0)
+            self.toolbar, text="deshacer", highlightthickness=0,
+            command=self.undo)
         self.undo_button.grid(row=0, column=4)
 
         self.redo_button = tkinter.Button(
-            self.toolbar, text="rehacer", highlightthickness=0)
+            self.toolbar, text="rehacer", highlightthickness=0,
+            command=self.redo)
         self.redo_button.grid(row=0, column=5)
 
         # create an inner frame to center the widgets
@@ -78,6 +83,7 @@ class AppWidgets(tkinter.Frame):
         name = "untitled-%r" % counter() if name is None else name
         frame = tkinter.Frame(self.notebook)
         wheel = file.File(frame)
+        wheel.grid(padx=0, pady=0, row=0, column=0)
         self.notebook.add(frame, text=name)
         # set the focus in the new tab
         self.notebook.select(frame)
@@ -102,13 +108,13 @@ class AppWidgets(tkinter.Frame):
             with open(wheel.file_path, "w") as wheel_file:
                 wheel_file.write(
                     f"[wheel]\n"
-                    f"number = {wheel.number_var.get()}\n"
-                    f"start = {wheel.start_var.get()}\n"
-                    f"saturation = {wheel.saturation_var.get()}\n"
-                    f"luminosity = {wheel.luminosity_var.get()}\n"
-                    f"background = {wheel.background_var.get()}\n"
-                    f"color_space = {wheel.color_space_var.get()}\n"
-                    f"outline = {wheel.outline_var.get()}")
+                    f"number = {wheel.settings.number}\n"
+                    f"start = {wheel.settings.start}\n"
+                    f"saturation = {wheel.settings.saturation}\n"
+                    f"luminosity = {wheel.settings.luminosity}\n"
+                    f"background = {wheel.view.background}\n"
+                    f"outline = {wheel.view.outline}\n"
+                    f"color_space = {wheel.color_space.space}")
         else:
             self.save_wheel(wheel=wheel, tab_id=tab_id)
 
@@ -125,13 +131,13 @@ class AppWidgets(tkinter.Frame):
         if dialog is not None:
             dialog.write(
                 f"[wheel]\n"
-                f"number = {wheel.number_var.get()}\n"
-                f"start = {wheel.start_var.get()}\n"
-                f"saturation = {wheel.saturation_var.get()}\n"
-                f"luminosity = {wheel.luminosity_var.get()}\n"
-                f"background = {wheel.background_var.get()}\n"
-                f"color_space = {wheel.color_space_var.get()}\n"
-                f"outline = {wheel.outline_var.get()}")
+                f"number = {wheel.settings.number}\n"
+                f"start = {wheel.settings.start}\n"
+                f"saturation = {wheel.settings.saturation}\n"
+                f"luminosity = {wheel.settings.luminosity}\n"
+                f"background = {wheel.view.background}\n"
+                f"outline = {wheel.view.outline}\n"
+                f"color_space = {wheel.color_space.space}")
 
             wheel_path = pathlib.Path(dialog.name)
             self.current_directory = str(wheel_path.parent)
@@ -157,25 +163,55 @@ class AppWidgets(tkinter.Frame):
             wheel = self.new_wheel(name=text)
             wheel.file_path = dialog.name
             dialog.close()
-            wheel.number_var.set(settings["wheel"]["number"])
-            wheel.start_var.set(settings["wheel"]["start"])
-            wheel.saturation_var.set(settings["wheel"]["saturation"])
-            wheel.luminosity_var.set(settings["wheel"]["luminosity"])
-            wheel.background_var.set(settings["wheel"]["background"])
-            wheel.outline_var.set(settings["wheel"]["outline"])
-            wheel.color_space_var.set(settings["wheel"]["color_space"])
+
+            wheel.settings.number = settings["wheel"]["number"]
+            wheel.settings.start = settings["wheel"]["start"]
+            wheel.settings.saturation = settings["wheel"]["saturation"]
+            wheel.settings.luminosity = settings["wheel"]["luminosity"]
+            wheel.view.background = settings["wheel"]["background"]
+            wheel.view.outline = settings["wheel"]["outline"]
+            wheel.color_space.space = settings["wheel"]["color_space"]
+
             wheel.draw_wheel()
 
+    def undo(self, event=None):
+        wheel, tab_id = self.get_wheel_and_tab_id()
+        wheel.history.prev()
+        data = wheel.history[wheel.history.cursor]
+        wheel.settings.number = data.number
+        wheel.settings.start = data.start
+        wheel.settings.saturation = data.saturation
+        wheel.settings.luminosity = data.luminosity
+        wheel.view.background = data.background
+        wheel.view.outline = data.outline
+        wheel.color_space.space = data.color_space
+        wheel.update_history = False
+        wheel.draw_wheel()
+        wheel.update_history = True
+
+    def redo(self, event=None):
+        wheel, tab_id = self.get_wheel_and_tab_id()
+        wheel.history.next()
+        data = wheel.history[wheel.history.cursor]
+        wheel.settings.number = data.number
+        wheel.settings.start = data.start
+        wheel.settings.saturation = data.saturation
+        wheel.settings.luminosity = data.luminosity
+        wheel.view.background = data.background
+        wheel.view.outline = data.outline
+        wheel.color_space.space = data.color_space
+        wheel.update_history = False
+        wheel.draw_wheel()
+        wheel.update_history = True
 
     def set_events(self):
         self.root.bind("<Control-o>", self.open_wheel)
         self.root.bind("<Control-n>", self.new_wheel)
         self.root.bind("<Control-s>", self.save_changes)
         self.root.bind("<Control-Shift-Key-S>", self.save_wheel)
-
-
-class App(AppWidgets):
-    pass
+        self.root.bind("<Control-Key-z>", self.undo)
+        self.root.bind("<Control-Shift-Key-Z>", self.redo)
+        self.root.bind("<Control-Key-y>", self.redo)
 
 
 if __name__ == '__main__':
diff --git a/test_file.py b/test_file.py
index 236140c..dbdd2a8 100644
--- a/test_file.py
+++ b/test_file.py
@@ -1,4 +1,5 @@
 import unittest
+from unittest import mock
 import tkinter
 from tkinter import ttk
 
@@ -12,224 +13,378 @@ class BaseSuite(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        cls.root.update_idletasks()
         cls.root.destroy()
         del cls.root
 
 
-class FileSuite(BaseSuite):
+class SettingsFrameSuit(BaseSuite):
     @classmethod
     def setUpClass(cls):
         super().setUpClass()
-        cls.app = file.File(cls.root)
-
-    # canvas
-    # ======
-
-    def test_canvas(self):
-        self.assertIsInstance(self.app.canvas, tkinter.Canvas)
-        self.assertTrue(self.app.canvas.winfo_manager())
+        cls.settings = file.SettingsFrame(cls.root, "Ajustes de la rueda")
+        cls.settings.grid(row=0, column=0)
 
+    @classmethod
+    def tearDownClass(cls):
+        cls.settings.destroy()
+        del cls.settings
+        super().tearDownClass()
 
-    # ==============
-    # wheel settings
-    # ==============
-
-    def test_wheel_settings(self):
-        self.assertIsInstance(self.app.settings_frame, tkinter.LabelFrame)
-        self.assertEqual(self.app.settings_frame["text"],
-                         "Ajustes de la rueda")
-        self.assertTrue(self.app.settings_frame.winfo_manager())
+    def test_settings_instance(self):
+        self.assertIsInstance(self.settings, file.SettingsFrame)
+        self.assertTrue(self.settings.winfo_manager())
 
-    # numbrer
-    # =======
+    # number
 
     def test_number_var(self):
-        self.assertIsInstance(self.app.number_var, tkinter.IntVar)
+        self.assertIsInstance(self.settings.number_var, tkinter.IntVar)
 
     def test_number_label(self):
-        self.assertIsInstance(self.app.number_label, tkinter.Label)
-        self.assertEqual(self.app.number_label["text"], "Cantidad:")
-        self.assertTrue(self.app.number_label.winfo_manager())
+        self.assertIsInstance(self.settings.number_label, tkinter.Label)
+        self.assertEqual(self.settings.number_label["text"], "Cantidad:")
+        self.assertTrue(self.settings.number_label.winfo_manager())
 
     def test_number_entry(self):
-        self.assertIsInstance(self.app.number_entry, tkinter.Entry)
-        self.assertTrue(self.app.number_entry.winfo_manager())
+        self.assertIsInstance(self.settings.number_entry, tkinter.Entry)
+        self.assertTrue(self.settings.number_entry.winfo_manager())
 
     def test_number_scale(self):
-        self.assertIsInstance(self.app.number_scale, tkinter.Scale)
-        self.assertTrue(self.app.number_scale.winfo_manager())
+        self.assertIsInstance(self.settings.number_scale, tkinter.Scale)
+        self.assertTrue(self.settings.number_scale.winfo_manager())
 
     # start
-    # =====
 
     def test_start_var(self):
-        self.assertIsInstance(self.app.start_var, tkinter.IntVar)
+        self.assertIsInstance(self.settings.start_var, tkinter.IntVar)
 
     def test_start_label(self):
-        self.assertIsInstance(self.app.start_label, tkinter.Label)
-        self.assertEqual(self.app.start_label["text"], "Empezar en:")
-        self.assertTrue(self.app.start_label.winfo_manager())
+        self.assertIsInstance(self.settings.start_label, tkinter.Label)
+        self.assertEqual(self.settings.start_label["text"], "Empezar en:")
+        self.assertTrue(self.settings.start_label.winfo_manager())
 
     def test_start_entry(self):
-        self.assertIsInstance(self.app.start_entry, tkinter.Entry)
-        self.assertTrue(self.app.start_entry.winfo_manager())
+        self.assertIsInstance(self.settings.start_entry, tkinter.Entry)
+        self.assertTrue(self.settings.start_entry.winfo_manager())
 
     def test_start_scale(self):
-        self.assertIsInstance(self.app.start_scale, tkinter.Scale)
-        self.assertTrue(self.app.start_scale.winfo_manager())
+        self.assertIsInstance(self.settings.start_scale, tkinter.Scale)
+        self.assertTrue(self.settings.start_scale.winfo_manager())
 
     # saturation
-    # ==========
 
     def test_saturation_var(self):
-        self.assertIsInstance(self.app.saturation_var, tkinter.IntVar)
+        self.assertIsInstance(self.settings.saturation_var, tkinter.IntVar)
 
     def test_saturation_label(self):
-        self.assertIsInstance(self.app.saturation_label, tkinter.Label)
-        self.assertEqual(self.app.saturation_label["text"],
+        self.assertIsInstance(self.settings.saturation_label, tkinter.Label)
+        self.assertEqual(self.settings.saturation_label["text"],
                          "Saturación:")
-        self.assertTrue(self.app.saturation_label.winfo_manager())
+        self.assertTrue(self.settings.saturation_label.winfo_manager())
 
     def test_saturation_entry(self):
-        self.assertIsInstance(self.app.saturation_entry, tkinter.Entry)
-        self.assertTrue(self.app.saturation_entry.winfo_manager())
+        self.assertIsInstance(self.settings.saturation_entry, tkinter.Entry)
+        self.assertTrue(self.settings.saturation_entry.winfo_manager())
 
     def test_saturation_scale(self):
-        self.assertIsInstance(self.app.saturation_scale, tkinter.Scale)
-        self.assertTrue(self.app.saturation_scale.winfo_manager())
+        self.assertIsInstance(self.settings.saturation_scale, tkinter.Scale)
+        self.assertTrue(self.settings.saturation_scale.winfo_manager())
 
     # luminosity
-    # ==========
 
     def test_luminosity_var(self):
-        self.assertIsInstance(self.app.luminosity_var, tkinter.IntVar)
+        self.assertIsInstance(self.settings.luminosity_var, tkinter.IntVar)
 
     def test_luminosity_label(self):
-        self.assertIsInstance(self.app.luminosity_label, tkinter.Label)
-        self.assertEqual(self.app.luminosity_label["text"],
+        self.assertIsInstance(self.settings.luminosity_label, tkinter.Label)
+        self.assertEqual(self.settings.luminosity_label["text"],
                          "Luminosidad:")
-        self.assertTrue(self.app.luminosity_label.winfo_manager())
+        self.assertTrue(self.settings.luminosity_label.winfo_manager())
 
     def test_luminosity_entry(self):
-        self.assertIsInstance(self.app.luminosity_entry, tkinter.Entry)
-        self.assertTrue(self.app.luminosity_entry.winfo_manager())
+        self.assertIsInstance(self.settings.luminosity_entry, tkinter.Entry)
+        self.assertTrue(self.settings.luminosity_entry.winfo_manager())
 
     def test_luminosity_scale(self):
-        self.assertIsInstance(self.app.luminosity_scale, tkinter.Scale)
-        self.assertTrue(self.app.luminosity_scale.winfo_manager())
+        self.assertIsInstance(self.settings.luminosity_scale, tkinter.Scale)
+        self.assertTrue(self.settings.luminosity_scale.winfo_manager())
+
+
+class ViewSuite(BaseSuite):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        cls.view = file.ViewFrame(cls.root, text="Visualización")
+        cls.view.grid(row=0, column=0)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.view.destroy()
+        del cls.view
+        super().tearDownClass()
 
-    # ==========
     # view frame
-    # ==========
 
     def test_view_frame(self):
-        self.assertIsInstance(self.app.view_frame, tkinter.LabelFrame)
-        self.assertEqual(self.app.view_frame["text"], "Visualización")
-        self.assertTrue(self.app.view_frame.winfo_manager())
+        self.assertIsInstance(self.view, tkinter.LabelFrame)
+        self.assertEqual(self.view["text"], "Visualización")
+        self.assertTrue(self.view.winfo_manager())
 
     # background
-    # ==========
 
     def test_background_var(self):
-        self.assertIsInstance(self.app.background_var, tkinter.StringVar)
+        self.assertIsInstance(self.view.background_var, tkinter.StringVar)
 
     def test_background_label(self):
-        self.assertIsInstance(self.app.background_label, tkinter.Label)
-        self.assertEqual(self.app.background_label["text"], "Color de fondo:")
-        self.assertTrue(self.app.background_label.winfo_manager())
+        self.assertIsInstance(self.view.background_label, tkinter.Label)
+        self.assertEqual(self.view.background_label["text"], "Color de fondo:")
+        self.assertTrue(self.view.background_label.winfo_manager())
 
     def test_background_entry(self):
-        self.assertIsInstance(self.app.background_entry, tkinter.Entry)
-        self.assertTrue(self.app.background_entry.winfo_manager())
+        self.assertIsInstance(self.view.background_entry, tkinter.Entry)
+        self.assertTrue(self.view.background_entry.winfo_manager())
 
     # outline
-    # =======
 
     def test_outline_var(self):
-        self.assertIsInstance(self.app.outline_var, tkinter.IntVar)
+        self.assertIsInstance(self.view.outline_var, tkinter.IntVar)
 
     def test_outline_checkbutton(self):
-        self.assertIsInstance(self.app.outline_checkbutton,
+        self.assertIsInstance(self.view.outline_checkbutton,
                               tkinter.Checkbutton)
-        self.assertEqual(self.app.outline_checkbutton["text"],
+        self.assertEqual(self.view.outline_checkbutton["text"],
                          " Dibujar contorno")
-        self.assertTrue(self.app.outline_checkbutton.winfo_manager())
+        self.assertTrue(self.view.outline_checkbutton.winfo_manager())
 
-    # ===========
-    # space frame
-    # ===========
 
-    def test_color_space_frame(self):
-        self.assertIsInstance(self.app.color_space_frame, tkinter.LabelFrame)
-        self.assertEqual(self.app.color_space_frame["text"], "Espacio de color")
-        self.assertTrue(self.app.color_space_frame.winfo_manager())
+class SpaceSuite(BaseSuite):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        cls.space = file.ColorSpaceFrame(cls.root, "Espacio de color")
+        cls.space.grid(row=0, column=0)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.space.destroy()
+        del cls.space
+        super().tearDownClass()
 
-    # color space
-    # ===========
+    def test_color_space_frame(self):
+        self.assertIsInstance(self.space, file.ColorSpaceFrame)
+        self.assertEqual(self.space["text"], "Espacio de color")
+        self.assertTrue(self.space.winfo_manager())
 
     def test_color_space_var(self):
-        self.assertIsInstance(self.app.color_space_var, tkinter.StringVar)
+        self.assertIsInstance(self.space.color_space_var, tkinter.StringVar)
 
     def test_lchab_radiobutton(self):
-        self.assertIsInstance(self.app.lchab_radiobutton, tkinter.Radiobutton)
-        self.assertEqual(self.app.lchab_radiobutton["text"], "Lab")
-        self.assertTrue(self.app.lchab_radiobutton.winfo_manager())
+        self.assertIsInstance(self.space.lchab_radiobutton, tkinter.Radiobutton)
+        self.assertEqual(self.space.lchab_radiobutton["text"], "Lab")
+        self.assertTrue(self.space.lchab_radiobutton.winfo_manager())
 
     def test_lchuv_radiobutton(self):
-        self.assertIsInstance(self.app.lchuv_radiobutton, tkinter.Radiobutton)
-        self.assertEqual(self.app.lchuv_radiobutton["text"], "Luv")
-        self.assertTrue(self.app.lchuv_radiobutton.winfo_manager())
+        self.assertIsInstance(self.space.lchuv_radiobutton, tkinter.Radiobutton)
+        self.assertEqual(self.space.lchuv_radiobutton["text"], "Luv")
+        self.assertTrue(self.space.lchuv_radiobutton.winfo_manager())
 
     def test_hsl_radiobutton(self):
-        self.assertIsInstance(self.app.hsl_radiobutton, tkinter.Radiobutton)
-        self.assertEqual(self.app.hsl_radiobutton["text"], "HSL")
-        self.assertTrue(self.app.hsl_radiobutton.winfo_manager())
+        self.assertIsInstance(self.space.hsl_radiobutton, tkinter.Radiobutton)
+        self.assertEqual(self.space.hsl_radiobutton["text"], "HSL")
+        self.assertTrue(self.space.hsl_radiobutton.winfo_manager())
 
     def test_hsv_radiobutton(self):
-        self.assertIsInstance(self.app.hsv_radiobutton, tkinter.Radiobutton)
-        self.assertEqual(self.app.hsv_radiobutton["text"], "HSV")
-        self.assertTrue(self.app.hsv_radiobutton.winfo_manager())
+        self.assertIsInstance(self.space.hsv_radiobutton, tkinter.Radiobutton)
+        self.assertEqual(self.space.hsv_radiobutton["text"], "HSV")
+        self.assertTrue(self.space.hsv_radiobutton.winfo_manager())
 
     def test_ipt_radiobutton(self):
-        self.assertIsInstance(self.app.ipt_radiobutton, tkinter.Radiobutton)
-        self.assertEqual(self.app.ipt_radiobutton["text"], "IPT")
-        self.assertTrue(self.app.ipt_radiobutton.winfo_manager())
+        self.assertIsInstance(self.space.ipt_radiobutton, tkinter.Radiobutton)
+        self.assertEqual(self.space.ipt_radiobutton["text"], "IPT")
+        self.assertTrue(self.space.ipt_radiobutton.winfo_manager())
 
-    # ==========
-    # data frame
-    # ==========
+
+class DataSuite(BaseSuite):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        cls.data = file.DataFrame(cls.root)
+        cls.data.grid(row=0, column=0)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.data.destroy()
+        del cls.data
+        super().tearDownClass()
+
+    def setUp(self):
+        self.data.delete_all()
 
     def test_data_frame(self):
-        self.assertIsInstance(self.app.data_frame, tkinter.Frame)
-        self.assertTrue(self.app.data_frame.winfo_manager())
+        self.assertIsInstance(self.data, file.DataFrame)
+        self.assertTrue(self.data.winfo_manager())
 
     def test_color_treeview(self):
-        self.assertIsInstance(self.app.color_treeview, ttk.Treeview)
-        self.assertTrue(self.app.color_treeview.winfo_manager())
+        self.assertIsInstance(self.data.color_treeview, ttk.Treeview)
+        self.assertTrue(self.data.color_treeview.winfo_manager())
 
     def test_hexrgb_treeview(self):
-        self.assertIsInstance(self.app.hexrgb_treeview, ttk.Treeview)
-        self.assertTrue(self.app.hexrgb_treeview.winfo_manager())
+        self.assertIsInstance(self.data.hexrgb_treeview, ttk.Treeview)
+        self.assertTrue(self.data.hexrgb_treeview.winfo_manager())
 
     def test_hexrgba_treeview(self):
-        self.assertIsInstance(self.app.hexrgba_treeview, ttk.Treeview)
-        self.assertTrue(self.app.hexrgba_treeview.winfo_manager())
+        self.assertIsInstance(self.data.hexrgba_treeview, ttk.Treeview)
+        self.assertTrue(self.data.hexrgba_treeview.winfo_manager())
 
     def test_r_treeview(self):
-        self.assertIsInstance(self.app.r_treeview, ttk.Treeview)
-        self.assertTrue(self.app.r_treeview.winfo_manager())
+        self.assertIsInstance(self.data.r_treeview, ttk.Treeview)
+        self.assertTrue(self.data.r_treeview.winfo_manager())
 
     def test_g_treeview(self):
-        self.assertIsInstance(self.app.g_treeview, ttk.Treeview)
-        self.assertTrue(self.app.g_treeview.winfo_manager())
+        self.assertIsInstance(self.data.g_treeview, ttk.Treeview)
+        self.assertTrue(self.data.g_treeview.winfo_manager())
 
     def test_b_treeview(self):
-        self.assertIsInstance(self.app.b_treeview, ttk.Treeview)
-        self.assertTrue(self.app.b_treeview.winfo_manager())
+        self.assertIsInstance(self.data.b_treeview, ttk.Treeview)
+        self.assertTrue(self.data.b_treeview.winfo_manager())
+
+    def test_scroll(self):
+        self.assertIsInstance(self.data.scroll, tkinter.Scrollbar)
+        self.assertTrue(self.data.scroll.winfo_manager())
+
+    def test_insert_method(self):
+        self.data.insert("#888888", 255, 128, 64)
+        for line in self.data.color_treeview.get_children():
+            self.assertEqual(self.data.color_treeview.item(line)["tags"],
+                             ["#888888"])
+            self.assertEqual(self.data.color_treeview.item(line)["values"],
+                             [""])
+        for line in self.data.hexrgb_treeview.get_children():
+            self.assertEqual(self.data.hexrgb_treeview.item(line)["values"],
+                             ["#888888"])
+        for line in self.data.hexrgba_treeview.get_children():
+            self.assertEqual(self.data.hexrgba_treeview.item(line)["values"],
+                             ["#888888ff"])
+        for line in self.data.r_treeview.get_children():
+            self.assertEqual(self.data.r_treeview.item(line)["values"], [255])
+        for line in self.data.g_treeview.get_children():
+            self.assertEqual(self.data.g_treeview.item(line)["values"], [128])
+        for line in self.data.b_treeview.get_children():
+            self.assertEqual(self.data.b_treeview.item(line)["values"], [64])
+
+    def test_delete_all_method(self):
+        self.data.insert("#888888", 255, 128, 64)
+        self.data.delete_all()
+        self.assertEqual(self.data.color_treeview.get_children(), ())
+        self.assertEqual(self.data.hexrgb_treeview.get_children(), ())
+        self.assertEqual(self.data.hexrgba_treeview.get_children(), ())
+        self.assertEqual(self.data.r_treeview.get_children(), ())
+        self.assertEqual(self.data.g_treeview.get_children(), ())
+        self.assertEqual(self.data.b_treeview.get_children(), ())
+
+    def test_copy_data_method(self):
+        self.data.insert("#888888", 255, 128, 64)
+
+        index = self.data.color_treeview.get_children()[0]
+        self.data.color_treeview.selection_set(index)
+        self.data.color_treeview.focus_set()
+        self.data.color_treeview.focus(index)
+        self.data.copy_color_data(None)
+        self.assertEqual(self.data.clipboard_get(), "")
+
+        index = self.data.hexrgb_treeview.get_children()[0]
+        self.data.hexrgb_treeview.selection_set(index)
+        self.data.hexrgb_treeview.focus_set()
+        self.data.hexrgb_treeview.focus(index)
+        self.data.copy_hexrgb_data(None)
+        self.assertEqual(self.data.clipboard_get(), "#888888")
+
+        index = self.data.hexrgba_treeview.get_children()[0]
+        self.data.hexrgba_treeview.selection_set(index)
+        self.data.hexrgba_treeview.focus_set()
+        self.data.hexrgba_treeview.focus(index)
+        self.data.copy_hexrgba_data(None)
+        self.assertEqual(self.data.clipboard_get(), "#888888ff")
+
+        index = self.data.r_treeview.get_children()[0]
+        self.data.r_treeview.selection_set(index)
+        self.data.r_treeview.focus_set()
+        self.data.r_treeview.focus(index)
+        self.data.copy_r_data(None)
+        self.assertEqual(self.data.clipboard_get(), "255")
+
+        index = self.data.g_treeview.get_children()[0]
+        self.data.g_treeview.selection_set(index)
+        self.data.g_treeview.focus_set()
+        self.data.g_treeview.focus(index)
+        self.data.copy_g_data(None)
+        self.assertEqual(self.data.clipboard_get(), "128")
+
+        index = self.data.b_treeview.get_children()[0]
+        self.data.b_treeview.selection_set(index)
+        self.data.b_treeview.focus_set()
+        self.data.b_treeview.focus(index)
+        self.data.copy_b_data(None)
+        self.assertEqual(self.data.clipboard_get(), "64")
+
+    def test_set_yview_method(self):
+        self.data.set_yview("moveto", 1.0)
+        self.assertEqual(self.data.color_treeview.yview(), (0.0, 1.0))
+        self.assertEqual(self.data.hexrgb_treeview.yview(), (0.0, 1.0))
+        self.assertEqual(self.data.hexrgba_treeview.yview(), (0.0, 1.0))
+        self.assertEqual(self.data.r_treeview.yview(), (0.0, 1.0))
+        self.assertEqual(self.data.g_treeview.yview(), (0.0, 1.0))
+        self.assertEqual(self.data.b_treeview.yview(), (0.0, 1.0))
+
+    def test_set_scroll_method(self):
+        self.data.set_scroll(1, 1)
+        self.assertEqual(self.data.scroll.get(), (1.0, 1.0))
+
+
+class FileSuite(BaseSuite):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        cls.app = file.File(cls.root)
+        cls.app.grid(row=0, column=0)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.app.destroy()
+        del cls.app
+        super().tearDownClass()
 
-    def test_data_scroll(self):
-        self.assertIsInstance(self.app.data_scroll, tkinter.Scrollbar)
-        self.assertTrue(self.app.data_scroll.winfo_manager())
+    def test_canvas(self):
+        self.assertIsInstance(self.app.canvas, tkinter.Canvas)
+        self.assertTrue(self.app.canvas.winfo_manager())
+
+    def test_wheel_settings(self):
+        self.assertIsInstance(self.app.settings, tkinter.LabelFrame)
+        self.assertEqual(self.app.settings["text"],
+                         "Ajustes de la rueda")
+        self.assertTrue(self.app.settings.winfo_manager())
+
+    def test_color_space(self):
+        self.assertIsInstance(self.app.color_space, file.ColorSpaceFrame)
+        self.assertEqual(self.app.color_space["text"], "Espacio de color")
+        self.assertTrue(self.app.color_space.winfo_manager())
+
+    def test_data(self):
+        self.assertIsInstance(self.app.data, file.DataFrame)
+        self.assertTrue(self.app.data.winfo_manager())
+
+    def test_history(self):
+        self.app.draw_wheel()
+        expected = file.HistoryData(
+            number=360,
+            start=0,
+            saturation=50,
+            luminosity=50,
+            background="gray20",
+            color_space="HSL",
+            outline=False,
+        )
+        self.assertEqual(self.app.history[0], expected)
 
 
 if __name__ == '__main__':
diff --git a/test_main.py b/test_main.py
index ca59f72..be469cf 100644
--- a/test_main.py
+++ b/test_main.py
@@ -14,10 +14,14 @@ class BaseSuite(unittest.TestCase):
 
     @classmethod
     def tearDownClass(cls):
+        cls.app.destroy()
+        del cls.app
+        cls.root.update_idletasks()
         cls.root.destroy()
         del cls.root
 
-class MainWidgetsSuite:
+
+class MainWidgetsSuite(BaseSuite):
     def test_main_application_instance(self):
         self.assertIsInstance(self.app, main.App)
 
@@ -25,7 +29,7 @@ class MainWidgetsSuite:
         self.assertTrue(self.app.winfo_manager())
 
 
-class ToolbarSuite:
+class ToolbarSuite(BaseSuite):
     def test_toolbar_property(self):
         self.assertIsInstance(self.app.toolbar, tkinter.Frame)
 
@@ -57,35 +61,105 @@ class ToolbarSuite:
         self.assertTrue(self.app.redo_button.winfo_manager())
 
 
-class GlobalEventsSuite:
-    def test_new_event(self):
-        self.app.event_generate("<Control-n>")
-        self.assertTrue(self.app.notebook.tabs())
+class GlobalEventsSuite(BaseSuite):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        for tab_id in cls.app.notebook.tabs():
+            index = cls.app.notebook.index(tab_id)
+            cls.app.notebook.forget(index)
 
-    def test_open_event(self):
-        self.app.event_generate("<Control-o>")
+    def setUp(self):
+        self.app.new_wheel()
 
-    def test_save_event(self):
-        self.app.event_generate("<Control-s>")
+    def tearDown(self):
+        for tab_id in self.app.notebook.tabs():
+            index = self.app.notebook.index(tab_id)
+            self.app.notebook.forget(index)
 
-    def test_save_as_event(self):
-        self.app.event_generate("<Control-Shift-Key-S>")
+    def test_new_event(self):
+        self.app.event_generate("<Control-n>")
+        self.assertEqual(len(self.app.notebook.tabs()), 2)
 
-    def test_undo_event(self):
-        self.app.event_generate("<Control-z>")
+    def test_undo_event_with_one_element(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        self.app.event_generate("<Control-Key-z>")
+        self.assertEqual(wheel.settings.number, 360)
 
-    def test_redo_event(self):
+    def test_redo_event_with_one_element(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
         self.app.event_generate("<Control-Shift-Key-Z>")
+        self.assertEqual(wheel.settings.number, 360)
+
+    def test_undo_with_cursor_at_end(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        wheel.settings.number = 2
+        wheel.draw_wheel()
+        wheel.settings.number = 3
+        wheel.draw_wheel()
+        self.app.event_generate("<Control-Key-z>")
+        self.assertEqual(wheel.settings.number, 2)
+        self.app.event_generate("<Control-Shift-Key-Z>")
+        self.assertEqual(wheel.settings.number, 3)
+
+    def test_redo_with_cursor_at_end(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        wheel.settings.number = 2
+        wheel.draw_wheel()
+        wheel.settings.number = 3
+        wheel.draw_wheel()
+        self.app.event_generate("<Control-Shift-Key-Z>")
+        self.assertEqual(wheel.settings.number, 3)
+
+    def test_undo_with_cursor_at_middle(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        wheel.settings.number = 2
+        wheel.draw_wheel()
+        wheel.settings.number = 3
+        wheel.draw_wheel()
+        wheel.settings.number = 4
+        wheel.draw_wheel()
+        self.app.event_generate("<Control-Key-z>")
+        self.app.event_generate("<Control-Key-z>")
+        self.assertEqual(wheel.settings.number, 2)
+        self.app.event_generate("<Control-Shift-Key-Z>")
+        self.assertEqual(wheel.settings.number, 3)
+
+    def test_redo_with_cursor_at_middle(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        wheel.settings.number = 2
+        wheel.draw_wheel()
+        wheel.settings.number = 3
+        wheel.draw_wheel()
+        wheel.settings.number = 4
+        wheel.draw_wheel()
+        self.app.event_generate("<Control-Key-z>")
+        self.app.event_generate("<Control-Key-z>")
+        self.app.event_generate("<Control-Shift-Key-Z>")
+        self.assertEqual(wheel.settings.number, 3)
+        self.app.event_generate("<Control-Key-z>")
+        self.assertEqual(wheel.settings.number, 2)
+
+    def test_append_after_redo(self):
+        wheel, tab_id = self.app.get_wheel_and_tab_id()
+        wheel.settings.number = 2
+        wheel.draw_wheel()
+        wheel.settings.number = 3
+        wheel.draw_wheel()
+        wheel.settings.number = 4
+        wheel.draw_wheel()
+        self.app.event_generate("<Control-Key-z>")
+        self.app.event_generate("<Control-Key-z>")
+        wheel.settings.number = 5
+        wheel.draw_wheel()
+        self.assertEqual(wheel.settings.number, 5)
+        self.app.event_generate("<Control-Key-z>")
+        self.assertEqual(wheel.settings.number, 2)
 
 
 
-class AllSuites(BaseSuite, MainWidgetsSuite, ToolbarSuite, GlobalEventsSuite):
-    pass
-
-
 # atexti
 # config
-# treeview
 
 if __name__ == '__main__':
     unittest.main()
